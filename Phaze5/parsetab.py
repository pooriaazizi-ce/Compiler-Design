
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CALL CAMMA CHAR COLON CONST DIGIT DIGIT_ERROR DIVIDE DO ELSE END EQUAL FOR GREATEQ GREATER IDENTIFIER IF ILLEGALCHAR IN INTEGER LACKO LBRACKET LESS LESSEQ LPAREN MINES MUL NOT NOT_EQUAL OR OUT PLUS PRINT PROCEDURE RACKO RBRACKET READ RETURN RPAREN SEMICOLON STR THEN TO VARprogram : C V P BEGIN statement S END SEMICOLONC : CONST const_decl C\n    | epsilonV : VAR var_decl V\n    | epsilonP : proc_decl P\n    | epsilonS : statement S\n    | epsilonconst_decl : ID EQUAL integer SEMICOLONID : IDENTIFIER CAMMA ID\n    | IDENTIFIERvar_decl : ID COLON type SEMICOLONtype : INTEGER\n    | CHARproc_decl : PROCEDURE IDENTIFIER LPAREN F RPAREN SEMICOLON blockF : format SEMICOLON F\n    | format\n    | epsilonformat : ID COLON M typeM : mode\n    | epsilonmode : IN\n    | OUT\n    | IN OUTblock : BEGIN C V S END SEMICOLONstatement : block\n    | print\n    | read\n    | asgn\n    | cond\n    | for\n    | return\n    | callprint : PRINT LPAREN string E RPAREN SEMICOLONE : expr CAMMA E\n    | expr\n    | epsilonread : READ LPAREN string Va RPAREN SEMICOLONVa : var CAMMA Va\n    | expr\n    | epsilonasgn : var ASSIGN expr SEMICOLONcond : IF bool THEN statement ELEL : ELSE statement\n    | epsilonfor : FOR ID ASSIGN expr TO expr DO statementreturn : RETURN SEMICOLONcall : CALL IDENTIFIER LPAREN E RPAREN SEMICOLONexpr : integer\n    | MINES expr\n    | expr PLUS expr\n    | expr MINES expr\n    | expr MUL expr\n    | expr DIVIDE expr\n    | LPAREN expr RPAREN\n    | var\n    | string\n    | IDvar : ID BRAC\n    | IDBRAC : LBRACKET expr RBRACKET\n    | epsilonbool : NOT bool\n    | bool AND bool\n    | bool OR bool\n    | bool relop bool\n    | LPAREN bool RPAREN\n    | ID\n    | integerrelop : EQUAL\n    | GREATER\n    | LESS\n    | GREATEQ\n    | LESSEQ\n    | NOT_EQUALinteger : DIGITstring : STRepsilon :'
    
_lr_action_items = {'CONST':([0,8,28,50,],[3,3,3,-10,]),'VAR':([0,2,4,8,15,17,28,50,51,73,],[-79,6,-3,-79,6,-2,-79,-10,6,-13,]),'PROCEDURE':([0,2,4,5,7,8,12,15,17,23,50,73,152,155,],[-79,-79,-3,14,-5,-79,14,-79,-2,-4,-10,-13,-16,-26,]),'BEGIN':([0,2,4,5,7,8,11,12,13,15,17,20,21,23,28,29,30,31,32,33,34,35,36,37,50,51,52,67,73,74,87,115,122,130,147,148,149,152,155,156,158,160,162,163,164,],[-79,-79,-3,-79,-5,-79,20,-79,-7,-79,-2,28,-6,-4,-79,28,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,28,-48,-13,28,28,-43,-79,28,-44,28,-46,-16,-26,-35,-39,-45,-49,28,-47,]),'$end':([1,106,],[0,-1,]),'IDENTIFIER':([3,4,6,7,8,14,15,17,19,20,23,28,29,30,31,32,33,34,35,36,37,41,42,45,46,50,51,52,57,59,60,65,67,73,74,77,78,79,83,84,87,88,89,90,91,92,93,94,95,96,99,101,103,115,116,117,118,119,122,139,141,147,148,149,150,155,156,158,160,162,163,164,],[10,-3,10,-5,-79,22,-79,-2,10,10,-4,-79,10,-27,-28,-29,-30,-31,-32,-33,-34,10,10,68,10,-10,-79,10,10,10,10,10,-48,-13,10,10,-78,10,10,10,10,10,10,10,-71,-72,-73,-74,-75,-76,10,10,10,-43,10,10,10,10,-79,10,10,-44,10,-46,10,-26,-35,-39,-45,-49,10,-47,]),'PRINT':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,50,51,52,67,73,74,87,115,122,147,148,149,155,156,158,160,162,163,164,],[-3,-5,-79,-79,-2,38,-4,-79,38,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,38,-48,-13,38,38,-43,-79,-44,38,-46,-26,-35,-39,-45,-49,38,-47,]),'READ':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,50,51,52,67,73,74,87,115,122,147,148,149,155,156,158,160,162,163,164,],[-3,-5,-79,-79,-2,39,-4,-79,39,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,39,-48,-13,39,39,-43,-79,-44,39,-46,-26,-35,-39,-45,-49,39,-47,]),'IF':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,50,51,52,67,73,74,87,115,122,147,148,149,155,156,158,160,162,163,164,],[-3,-5,-79,-79,-2,41,-4,-79,41,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,41,-48,-13,41,41,-43,-79,-44,41,-46,-26,-35,-39,-45,-49,41,-47,]),'FOR':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,50,51,52,67,73,74,87,115,122,147,148,149,155,156,158,160,162,163,164,],[-3,-5,-79,-79,-2,42,-4,-79,42,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,42,-48,-13,42,42,-43,-79,-44,42,-46,-26,-35,-39,-45,-49,42,-47,]),'RETURN':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,50,51,52,67,73,74,87,115,122,147,148,149,155,156,158,160,162,163,164,],[-3,-5,-79,-79,-2,44,-4,-79,44,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,44,-48,-13,44,44,-43,-79,-44,44,-46,-26,-35,-39,-45,-49,44,-47,]),'CALL':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,50,51,52,67,73,74,87,115,122,147,148,149,155,156,158,160,162,163,164,],[-3,-5,-79,-79,-2,45,-4,-79,45,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,45,-48,-13,45,45,-43,-79,-44,45,-46,-26,-35,-39,-45,-49,45,-47,]),'END':([4,7,8,15,17,23,28,29,30,31,32,33,34,35,36,37,50,51,52,53,54,67,73,74,75,105,115,122,147,149,155,156,158,160,162,164,],[-3,-5,-79,-79,-2,-4,-79,-79,-27,-28,-29,-30,-31,-32,-33,-34,-10,-79,-79,76,-9,-48,-13,-79,-8,137,-43,-79,-44,-46,-26,-35,-39,-45,-49,-47,]),'EQUAL':([9,10,26,27,58,61,62,97,98,123,124,125,126,],[18,-12,-77,-11,91,-69,-70,91,91,91,91,91,-68,]),'CAMMA':([10,26,27,64,66,78,80,82,85,86,108,111,114,120,128,142,143,144,145,146,],[19,-77,-11,-60,-63,-78,-57,-50,-58,-59,139,141,-61,-51,-62,-52,-53,-54,-55,-56,]),'COLON':([10,16,27,72,],[-12,24,-11,104,]),'LBRACKET':([10,27,43,86,114,],[-12,-11,65,65,65,]),'ASSIGN':([10,27,40,43,63,64,66,128,],[-12,-11,57,-61,99,-60,-63,-62,]),'THEN':([10,26,27,58,61,62,97,123,124,125,126,],[-12,-77,-11,87,-69,-70,-64,-65,-66,-67,-68,]),'AND':([10,26,27,58,61,62,97,98,123,124,125,126,],[-12,-77,-11,88,-69,-70,88,88,88,88,88,-68,]),'OR':([10,26,27,58,61,62,97,98,123,124,125,126,],[-12,-77,-11,89,-69,-70,89,89,89,89,89,-68,]),'GREATER':([10,26,27,58,61,62,97,98,123,124,125,126,],[-12,-77,-11,92,-69,-70,92,92,92,92,92,-68,]),'LESS':([10,26,27,58,61,62,97,98,123,124,125,126,],[-12,-77,-11,93,-69,-70,93,93,93,93,93,-68,]),'GREATEQ':([10,26,27,58,61,62,97,98,123,124,125,126,],[-12,-77,-11,94,-69,-70,94,94,94,94,94,-68,]),'LESSEQ':([10,26,27,58,61,62,97,98,123,124,125,126,],[-12,-77,-11,95,-69,-70,95,95,95,95,95,-68,]),'NOT_EQUAL':([10,26,27,58,61,62,97,98,123,124,125,126,],[-12,-77,-11,96,-69,-70,96,96,96,96,96,-68,]),'SEMICOLON':([10,25,26,27,44,47,48,49,64,66,70,76,78,80,81,82,85,86,102,120,128,137,138,140,142,143,144,145,146,151,153,],[-12,50,-77,-11,67,73,-14,-15,-60,-63,103,106,-78,-57,115,-50,-58,-59,130,-51,-62,155,156,158,-52,-53,-54,-55,-56,162,-20,]),'PLUS':([10,26,27,64,66,78,80,81,82,85,86,100,108,111,112,114,120,121,127,128,142,143,144,145,146,161,],[-12,-77,-11,-60,-63,-78,-57,116,-50,-58,-59,116,116,-57,116,-59,116,116,116,-62,116,116,116,116,-56,116,]),'MINES':([10,26,27,57,64,65,66,77,78,79,80,81,82,83,84,85,86,99,100,101,108,111,112,114,116,117,118,119,120,121,127,128,139,141,142,143,144,145,146,150,161,],[-12,-77,-11,83,-60,83,-63,83,-78,83,-57,117,-50,83,83,-58,-59,83,117,83,117,-57,117,-59,83,83,83,83,117,117,117,-62,83,83,117,117,117,117,-56,83,117,]),'MUL':([10,26,27,64,66,78,80,81,82,85,86,100,108,111,112,114,120,121,127,128,142,143,144,145,146,161,],[-12,-77,-11,-60,-63,-78,-57,118,-50,-58,-59,118,118,-57,118,-59,118,118,118,-62,118,118,118,118,-56,118,]),'DIVIDE':([10,26,27,64,66,78,80,81,82,85,86,100,108,111,112,114,120,121,127,128,142,143,144,145,146,161,],[-12,-77,-11,-60,-63,-78,-57,119,-50,-58,-59,119,119,-57,119,-59,119,119,119,-62,119,119,119,119,-56,119,]),'RPAREN':([10,26,27,46,48,49,61,62,64,66,69,70,71,77,78,79,80,82,85,86,97,98,101,103,107,108,109,110,111,112,113,114,120,121,123,124,125,126,128,129,131,139,141,142,143,144,145,146,153,157,159,],[-12,-77,-11,-79,-14,-15,-69,-70,-60,-63,102,-18,-19,-79,-78,-79,-57,-50,-58,-59,-64,126,-79,-79,138,-37,-38,140,-57,-41,-42,-59,-51,146,-65,-66,-67,-68,-62,151,-17,-79,-79,-52,-53,-54,-55,-56,-20,-36,-40,]),'RBRACKET':([10,26,27,64,66,78,80,82,85,86,100,120,128,142,143,144,145,146,],[-12,-77,-11,-60,-63,-78,-57,-50,-58,-59,128,-51,-62,-52,-53,-54,-55,-56,]),'TO':([10,26,27,64,66,78,80,82,85,86,120,127,128,142,143,144,145,146,],[-12,-77,-11,-60,-63,-78,-57,-50,-58,-59,-51,150,-62,-52,-53,-54,-55,-56,]),'DO':([10,26,27,64,66,78,80,82,85,86,120,128,142,143,144,145,146,161,],[-12,-77,-11,-60,-63,-78,-57,-50,-58,-59,-51,-62,-52,-53,-54,-55,-56,163,]),'DIGIT':([18,41,57,59,60,65,77,78,79,83,84,88,89,90,91,92,93,94,95,96,99,101,116,117,118,119,139,141,150,],[26,26,26,26,26,26,26,-78,26,26,26,26,26,26,-71,-72,-73,-74,-75,-76,26,26,26,26,26,26,26,26,26,]),'LPAREN':([22,38,39,41,57,59,60,65,68,77,78,79,83,84,88,89,90,91,92,93,94,95,96,99,101,116,117,118,119,139,141,150,],[46,55,56,60,84,60,60,84,101,84,-78,84,84,84,60,60,60,-71,-72,-73,-74,-75,-76,84,84,84,84,84,84,84,84,84,]),'INTEGER':([24,104,132,133,134,135,136,154,],[48,-79,48,-21,-22,-23,-24,-25,]),'CHAR':([24,104,132,133,134,135,136,154,],[49,-79,49,-21,-22,-23,-24,-25,]),'ELSE':([30,31,32,33,34,35,36,37,67,115,122,147,149,155,156,158,160,162,164,],[-27,-28,-29,-30,-31,-32,-33,-34,-48,-43,148,-44,-46,-26,-35,-39,-45,-49,-47,]),'NOT':([41,59,60,88,89,90,91,92,93,94,95,96,],[59,59,59,59,59,59,-71,-72,-73,-74,-75,-76,]),'STR':([55,56,57,65,77,78,79,83,84,99,101,116,117,118,119,139,141,150,],[78,78,78,78,78,-78,78,78,78,78,78,78,78,78,78,78,78,78,]),'IN':([104,],[135,]),'OUT':([104,135,],[136,154,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'C':([0,8,28,],[2,17,51,]),'epsilon':([0,2,5,8,12,15,28,29,43,46,51,52,74,77,79,86,101,103,104,114,122,139,141,],[4,7,13,4,13,7,4,54,66,71,7,54,54,109,113,66,109,71,134,66,149,109,113,]),'V':([2,15,51,],[5,23,74,]),'const_decl':([3,],[8,]),'ID':([3,6,19,20,29,41,42,46,52,57,59,60,65,74,77,79,83,84,87,88,89,90,99,101,103,116,117,118,119,139,141,148,150,163,],[9,16,27,43,43,61,63,72,43,86,61,61,86,43,86,114,86,86,43,61,61,61,86,86,72,86,86,86,86,86,114,43,86,43,]),'P':([5,12,],[11,21,]),'proc_decl':([5,12,],[12,12,]),'var_decl':([6,],[15,]),'integer':([18,41,57,59,60,65,77,79,83,84,88,89,90,99,101,116,117,118,119,139,141,150,],[25,62,82,62,62,82,82,82,82,82,62,62,62,82,82,82,82,82,82,82,82,82,]),'statement':([20,29,52,74,87,148,163,],[29,52,52,52,122,160,164,]),'block':([20,29,52,74,87,130,148,163,],[30,30,30,30,30,152,30,30,]),'print':([20,29,52,74,87,148,163,],[31,31,31,31,31,31,31,]),'read':([20,29,52,74,87,148,163,],[32,32,32,32,32,32,32,]),'asgn':([20,29,52,74,87,148,163,],[33,33,33,33,33,33,33,]),'cond':([20,29,52,74,87,148,163,],[34,34,34,34,34,34,34,]),'for':([20,29,52,74,87,148,163,],[35,35,35,35,35,35,35,]),'return':([20,29,52,74,87,148,163,],[36,36,36,36,36,36,36,]),'call':([20,29,52,74,87,148,163,],[37,37,37,37,37,37,37,]),'var':([20,29,52,57,65,74,77,79,83,84,87,99,101,116,117,118,119,139,141,148,150,163,],[40,40,40,80,80,40,80,111,80,80,40,80,80,80,80,80,80,80,111,40,80,40,]),'type':([24,132,],[47,153,]),'S':([29,52,74,],[53,75,105,]),'bool':([41,59,60,88,89,90,],[58,97,98,123,124,125,]),'BRAC':([43,86,114,],[64,64,64,]),'F':([46,103,],[69,131,]),'format':([46,103,],[70,70,]),'string':([55,56,57,65,77,79,83,84,99,101,116,117,118,119,139,141,150,],[77,79,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'expr':([57,65,77,79,83,84,99,101,116,117,118,119,139,141,150,],[81,100,108,112,120,121,127,108,142,143,144,145,108,112,161,]),'relop':([58,97,98,123,124,125,],[90,90,90,90,90,90,]),'E':([77,101,139,],[107,129,157,]),'Va':([79,141,],[110,159,]),'M':([104,],[132,]),'mode':([104,],[133,]),'EL':([122,],[147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> C V P BEGIN statement S END SEMICOLON','program',8,'p_program','ply_lex_yacc.py',188),
  ('C -> CONST const_decl C','C',3,'p_C','ply_lex_yacc.py',192),
  ('C -> epsilon','C',1,'p_C','ply_lex_yacc.py',193),
  ('V -> VAR var_decl V','V',3,'p_V','ply_lex_yacc.py',198),
  ('V -> epsilon','V',1,'p_V','ply_lex_yacc.py',199),
  ('P -> proc_decl P','P',2,'p_P','ply_lex_yacc.py',204),
  ('P -> epsilon','P',1,'p_P','ply_lex_yacc.py',205),
  ('S -> statement S','S',2,'p_S','ply_lex_yacc.py',210),
  ('S -> epsilon','S',1,'p_S','ply_lex_yacc.py',211),
  ('const_decl -> ID EQUAL integer SEMICOLON','const_decl',4,'p_const_decl','ply_lex_yacc.py',215),
  ('ID -> IDENTIFIER CAMMA ID','ID',3,'p_ID','ply_lex_yacc.py',224),
  ('ID -> IDENTIFIER','ID',1,'p_ID','ply_lex_yacc.py',225),
  ('var_decl -> ID COLON type SEMICOLON','var_decl',4,'p_var_decl','ply_lex_yacc.py',229),
  ('type -> INTEGER','type',1,'p_type','ply_lex_yacc.py',238),
  ('type -> CHAR','type',1,'p_type','ply_lex_yacc.py',239),
  ('proc_decl -> PROCEDURE IDENTIFIER LPAREN F RPAREN SEMICOLON block','proc_decl',7,'p_proc_decl','ply_lex_yacc.py',243),
  ('F -> format SEMICOLON F','F',3,'p_F','ply_lex_yacc.py',253),
  ('F -> format','F',1,'p_F','ply_lex_yacc.py',254),
  ('F -> epsilon','F',1,'p_F','ply_lex_yacc.py',255),
  ('format -> ID COLON M type','format',4,'p_format','ply_lex_yacc.py',258),
  ('M -> mode','M',1,'p_M','ply_lex_yacc.py',260),
  ('M -> epsilon','M',1,'p_M','ply_lex_yacc.py',261),
  ('mode -> IN','mode',1,'p_mode','ply_lex_yacc.py',264),
  ('mode -> OUT','mode',1,'p_mode','ply_lex_yacc.py',265),
  ('mode -> IN OUT','mode',2,'p_mode','ply_lex_yacc.py',266),
  ('block -> BEGIN C V S END SEMICOLON','block',6,'p_block','ply_lex_yacc.py',269),
  ('statement -> block','statement',1,'p_statement','ply_lex_yacc.py',272),
  ('statement -> print','statement',1,'p_statement','ply_lex_yacc.py',273),
  ('statement -> read','statement',1,'p_statement','ply_lex_yacc.py',274),
  ('statement -> asgn','statement',1,'p_statement','ply_lex_yacc.py',275),
  ('statement -> cond','statement',1,'p_statement','ply_lex_yacc.py',276),
  ('statement -> for','statement',1,'p_statement','ply_lex_yacc.py',277),
  ('statement -> return','statement',1,'p_statement','ply_lex_yacc.py',278),
  ('statement -> call','statement',1,'p_statement','ply_lex_yacc.py',279),
  ('print -> PRINT LPAREN string E RPAREN SEMICOLON','print',6,'p_print','ply_lex_yacc.py',283),
  ('E -> expr CAMMA E','E',3,'p_E','ply_lex_yacc.py',285),
  ('E -> expr','E',1,'p_E','ply_lex_yacc.py',286),
  ('E -> epsilon','E',1,'p_E','ply_lex_yacc.py',287),
  ('read -> READ LPAREN string Va RPAREN SEMICOLON','read',6,'p_read','ply_lex_yacc.py',290),
  ('Va -> var CAMMA Va','Va',3,'p_Va','ply_lex_yacc.py',293),
  ('Va -> expr','Va',1,'p_Va','ply_lex_yacc.py',294),
  ('Va -> epsilon','Va',1,'p_Va','ply_lex_yacc.py',295),
  ('asgn -> var ASSIGN expr SEMICOLON','asgn',4,'p_asgn','ply_lex_yacc.py',298),
  ('cond -> IF bool THEN statement EL','cond',5,'p_cond','ply_lex_yacc.py',375),
  ('EL -> ELSE statement','EL',2,'p_EL','ply_lex_yacc.py',393),
  ('EL -> epsilon','EL',1,'p_EL','ply_lex_yacc.py',394),
  ('for -> FOR ID ASSIGN expr TO expr DO statement','for',8,'p_for','ply_lex_yacc.py',399),
  ('return -> RETURN SEMICOLON','return',2,'p_return','ply_lex_yacc.py',406),
  ('call -> CALL IDENTIFIER LPAREN E RPAREN SEMICOLON','call',6,'p_call','ply_lex_yacc.py',409),
  ('expr -> integer','expr',1,'p_expr','ply_lex_yacc.py',412),
  ('expr -> MINES expr','expr',2,'p_expr','ply_lex_yacc.py',413),
  ('expr -> expr PLUS expr','expr',3,'p_expr','ply_lex_yacc.py',414),
  ('expr -> expr MINES expr','expr',3,'p_expr','ply_lex_yacc.py',415),
  ('expr -> expr MUL expr','expr',3,'p_expr','ply_lex_yacc.py',416),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','ply_lex_yacc.py',417),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','ply_lex_yacc.py',418),
  ('expr -> var','expr',1,'p_expr','ply_lex_yacc.py',419),
  ('expr -> string','expr',1,'p_expr','ply_lex_yacc.py',420),
  ('expr -> ID','expr',1,'p_expr','ply_lex_yacc.py',421),
  ('var -> ID BRAC','var',2,'p_var','ply_lex_yacc.py',430),
  ('var -> ID','var',1,'p_var','ply_lex_yacc.py',431),
  ('BRAC -> LBRACKET expr RBRACKET','BRAC',3,'p_BRAC','ply_lex_yacc.py',435),
  ('BRAC -> epsilon','BRAC',1,'p_BRAC','ply_lex_yacc.py',436),
  ('bool -> NOT bool','bool',2,'p_bool','ply_lex_yacc.py',439),
  ('bool -> bool AND bool','bool',3,'p_bool','ply_lex_yacc.py',440),
  ('bool -> bool OR bool','bool',3,'p_bool','ply_lex_yacc.py',441),
  ('bool -> bool relop bool','bool',3,'p_bool','ply_lex_yacc.py',442),
  ('bool -> LPAREN bool RPAREN','bool',3,'p_bool','ply_lex_yacc.py',443),
  ('bool -> ID','bool',1,'p_bool','ply_lex_yacc.py',444),
  ('bool -> integer','bool',1,'p_bool','ply_lex_yacc.py',445),
  ('relop -> EQUAL','relop',1,'p_relop','ply_lex_yacc.py',454),
  ('relop -> GREATER','relop',1,'p_relop','ply_lex_yacc.py',455),
  ('relop -> LESS','relop',1,'p_relop','ply_lex_yacc.py',456),
  ('relop -> GREATEQ','relop',1,'p_relop','ply_lex_yacc.py',457),
  ('relop -> LESSEQ','relop',1,'p_relop','ply_lex_yacc.py',458),
  ('relop -> NOT_EQUAL','relop',1,'p_relop','ply_lex_yacc.py',459),
  ('integer -> DIGIT','integer',1,'p_integer','ply_lex_yacc.py',464),
  ('string -> STR','string',1,'p_string','ply_lex_yacc.py',468),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','ply_lex_yacc.py',472),
]
