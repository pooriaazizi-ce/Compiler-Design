
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CALL CAMMA COLON CONST DIGIT DIGIT_ERROR DIVIDE DO ELSE END EQUAL FOR GREATEQ GREATER IDENTIFIER IF ILLEGALCHAR IN INTEGER LACKO LBRACKET LESS LESSEQ LPAREN MINES MUL NOT NOT_EQUAL OR OUT PLUS PRINT PROCEDURE RACKO RBRACKET READ RETURN RPAREN SEMICOLON THEN TO VARprogram : C V P BEGIN statement S END SEMICOLONC : CONST const_decl C\n    | epsilonV : VAR var_decl V\n    | epsilonP : proc_decl P\n    | epsilonS : statement S\n    | epsilonconst_decl : ID EQUAL integer SEMICOLONID : IDENTIFIER CAMMA ID\n    | IDENTIFIERvar_decl : ID COLON type SEMICOLONtype : INTEGERproc_decl : PROCEDURE IDENTIFIER LPAREN F RPAREN SEMICOLON blockF : format SEMICOLON F\n    | format\n    | epsilonformat : ID COLON M typeM : mode\n    | epsilonmode : IN\n    | OUT\n    | IN OUTblock : BEGIN C V S END SEMICOLONstatement : block\n    | print\n    | read\n    | asgn\n    | cond\n    | for\n    | return\n    | callprint : PRINT LPAREN string E RPAREN SEMICOLONE : expr CAMMA E\n    | expr\n    | epsilonread : READ LPAREN string Va RPAREN SEMICOLONVa : var CAMMA Va\n    | expr\n    | epsilonstring : IDENTIFIERasgn : var ASSIGN expr SEMICOLONcond : IF bool THEN statement ELEL : ELSE statement\n    | epsilonfor : FOR IDENTIFIER ASSIGN expr TO expr DO statementreturn : RETURN SEMICOLONcall : CALL IDENTIFIER LPAREN E RPAREN SEMICOLONexpr : integer\n    | MINES expr\n    | expr PLUS expr\n    | expr MINES expr\n    | expr MUL expr\n    | expr DIVIDE expr\n    | LPAREN expr RPAREN\n    | varvar : IDENTIFIER BRACBRAC : LBRACKET expr RBRACKET\n    | epsilonbool : NOT bool\n    | bool AND bool\n    | bool OR bool\n    | bool relop bool\n    | LPAREN bool RPAREN\n    | IDENTIFIER\n    | DIGITrelop : EQUAL\n    | GREATER\n    | LESS\n    | GREATEQ\n    | LESSEQ\n    | NOT_EQUALinteger : DIGITepsilon :'
    
_lr_action_items = {'CONST':([0,8,28,49,],[3,3,3,-10,]),'VAR':([0,2,4,8,15,17,28,49,50,72,],[-75,6,-3,-75,6,-2,-75,-10,6,-13,]),'PROCEDURE':([0,2,4,5,7,8,12,15,17,23,49,72,148,151,],[-75,-75,-3,14,-5,-75,14,-75,-2,-4,-10,-13,-15,-25,]),'BEGIN':([0,2,4,5,7,8,11,12,13,15,17,20,21,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,84,111,118,126,143,144,145,148,151,152,154,156,158,159,160,],[-75,-75,-3,-75,-5,-75,20,-75,-7,-75,-2,28,-6,-4,-75,28,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,28,-48,-13,28,28,-43,-75,28,-44,28,-46,-15,-25,-34,-38,-45,-49,28,-47,]),'$end':([1,103,],[0,-1,]),'IDENTIFIER':([3,4,6,7,8,14,15,17,19,20,23,28,29,30,31,32,33,34,35,36,37,41,42,45,46,49,50,51,54,55,56,58,59,64,66,72,73,76,77,78,82,83,84,85,86,87,88,89,90,91,92,93,96,98,100,111,112,113,114,115,118,135,137,143,144,145,146,151,152,154,156,158,159,160,],[10,-3,10,-5,-75,22,-75,-2,10,43,-4,-75,43,-26,-27,-28,-29,-30,-31,-32,-33,60,62,67,10,-10,-75,43,77,77,43,60,60,43,-48,-13,43,43,-42,43,43,43,43,60,60,60,-68,-69,-70,-71,-72,-73,43,43,10,-43,43,43,43,43,-75,43,43,-44,43,-46,43,-25,-34,-38,-45,-49,43,-47,]),'PRINT':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,84,111,118,143,144,145,151,152,154,156,158,159,160,],[-3,-5,-75,-75,-2,38,-4,-75,38,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,38,-48,-13,38,38,-43,-75,-44,38,-46,-25,-34,-38,-45,-49,38,-47,]),'READ':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,84,111,118,143,144,145,151,152,154,156,158,159,160,],[-3,-5,-75,-75,-2,39,-4,-75,39,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,39,-48,-13,39,39,-43,-75,-44,39,-46,-25,-34,-38,-45,-49,39,-47,]),'IF':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,84,111,118,143,144,145,151,152,154,156,158,159,160,],[-3,-5,-75,-75,-2,41,-4,-75,41,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,41,-48,-13,41,41,-43,-75,-44,41,-46,-25,-34,-38,-45,-49,41,-47,]),'FOR':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,84,111,118,143,144,145,151,152,154,156,158,159,160,],[-3,-5,-75,-75,-2,42,-4,-75,42,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,42,-48,-13,42,42,-43,-75,-44,42,-46,-25,-34,-38,-45,-49,42,-47,]),'RETURN':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,84,111,118,143,144,145,151,152,154,156,158,159,160,],[-3,-5,-75,-75,-2,44,-4,-75,44,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,44,-48,-13,44,44,-43,-75,-44,44,-46,-25,-34,-38,-45,-49,44,-47,]),'CALL':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,84,111,118,143,144,145,151,152,154,156,158,159,160,],[-3,-5,-75,-75,-2,45,-4,-75,45,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,45,-48,-13,45,45,-43,-75,-44,45,-46,-25,-34,-38,-45,-49,45,-47,]),'END':([4,7,8,15,17,23,28,29,30,31,32,33,34,35,36,37,49,50,51,52,53,66,72,73,74,102,111,118,143,145,151,152,154,156,158,160,],[-3,-5,-75,-75,-2,-4,-75,-75,-26,-27,-28,-29,-30,-31,-32,-33,-10,-75,-75,75,-9,-48,-13,-75,-8,133,-43,-75,-44,-46,-25,-34,-38,-45,-49,-47,]),'EQUAL':([9,10,27,57,60,61,94,95,119,120,121,122,],[18,-12,-11,88,-66,-67,88,88,88,88,88,-65,]),'CAMMA':([10,26,43,63,65,79,81,105,108,116,124,138,139,140,141,142,],[19,-74,-75,-58,-60,-57,-50,135,137,-51,-59,-52,-53,-54,-55,-56,]),'COLON':([10,16,27,71,],[-12,24,-11,101,]),'DIGIT':([18,41,56,58,59,64,76,77,78,82,83,85,86,87,88,89,90,91,92,93,96,98,112,113,114,115,135,137,146,],[26,61,26,61,61,26,26,-42,26,26,26,61,61,61,-68,-69,-70,-71,-72,-73,26,26,26,26,26,26,26,26,26,]),'LPAREN':([22,38,39,41,56,58,59,64,67,76,77,78,82,83,85,86,87,88,89,90,91,92,93,96,98,112,113,114,115,135,137,146,],[46,54,55,59,83,59,59,83,98,83,-42,83,83,83,59,59,59,-68,-69,-70,-71,-72,-73,83,83,83,83,83,83,83,83,83,]),'INTEGER':([24,101,128,129,130,131,132,150,],[48,-75,48,-20,-21,-22,-23,-24,]),'SEMICOLON':([25,26,43,44,47,48,63,65,69,75,79,80,81,99,116,124,133,134,136,138,139,140,141,142,147,149,],[49,-74,-75,66,72,-14,-58,-60,100,103,-57,111,-50,126,-51,-59,151,152,154,-52,-53,-54,-55,-56,158,-19,]),'PLUS':([26,43,63,65,79,80,81,97,105,108,109,116,117,123,124,138,139,140,141,142,157,],[-74,-75,-58,-60,-57,112,-50,112,112,-57,112,112,112,112,-59,112,112,112,112,-56,112,]),'MINES':([26,43,56,63,64,65,76,77,78,79,80,81,82,83,96,97,98,105,108,109,112,113,114,115,116,117,123,124,135,137,138,139,140,141,142,146,157,],[-74,-75,82,-58,82,-60,82,-42,82,-57,113,-50,82,82,82,113,82,113,-57,113,82,82,82,82,113,113,113,-59,82,82,113,113,113,113,-56,82,113,]),'MUL':([26,43,63,65,79,80,81,97,105,108,109,116,117,123,124,138,139,140,141,142,157,],[-74,-75,-58,-60,-57,114,-50,114,114,-57,114,114,114,114,-59,114,114,114,114,-56,114,]),'DIVIDE':([26,43,63,65,79,80,81,97,105,108,109,116,117,123,124,138,139,140,141,142,157,],[-74,-75,-58,-60,-57,115,-50,115,115,-57,115,115,115,115,-59,115,115,115,115,-56,115,]),'RBRACKET':([26,43,63,65,79,81,97,116,124,138,139,140,141,142,],[-74,-75,-58,-60,-57,-50,124,-51,-59,-52,-53,-54,-55,-56,]),'RPAREN':([26,43,46,48,60,61,63,65,68,69,70,76,77,78,79,81,94,95,98,100,104,105,106,107,108,109,110,116,117,119,120,121,122,124,125,127,135,137,138,139,140,141,142,149,153,155,],[-74,-75,-75,-14,-66,-67,-58,-60,99,-17,-18,-75,-42,-75,-57,-50,-61,122,-75,-75,134,-36,-37,136,-57,-40,-41,-51,142,-62,-63,-64,-65,-59,147,-16,-75,-75,-52,-53,-54,-55,-56,-19,-35,-39,]),'TO':([26,43,63,65,79,81,116,123,124,138,139,140,141,142,],[-74,-75,-58,-60,-57,-50,-51,146,-59,-52,-53,-54,-55,-56,]),'DO':([26,43,63,65,79,81,116,124,138,139,140,141,142,157,],[-74,-75,-58,-60,-57,-50,-51,-59,-52,-53,-54,-55,-56,159,]),'ELSE':([30,31,32,33,34,35,36,37,66,111,118,143,145,151,152,154,156,158,160,],[-26,-27,-28,-29,-30,-31,-32,-33,-48,-43,144,-44,-46,-25,-34,-38,-45,-49,-47,]),'ASSIGN':([40,43,62,63,65,124,],[56,-75,96,-58,-60,-59,]),'NOT':([41,58,59,85,86,87,88,89,90,91,92,93,],[58,58,58,58,58,58,-68,-69,-70,-71,-72,-73,]),'LBRACKET':([43,],[64,]),'THEN':([57,60,61,94,119,120,121,122,],[84,-66,-67,-61,-62,-63,-64,-65,]),'AND':([57,60,61,94,95,119,120,121,122,],[85,-66,-67,85,85,85,85,85,-65,]),'OR':([57,60,61,94,95,119,120,121,122,],[86,-66,-67,86,86,86,86,86,-65,]),'GREATER':([57,60,61,94,95,119,120,121,122,],[89,-66,-67,89,89,89,89,89,-65,]),'LESS':([57,60,61,94,95,119,120,121,122,],[90,-66,-67,90,90,90,90,90,-65,]),'GREATEQ':([57,60,61,94,95,119,120,121,122,],[91,-66,-67,91,91,91,91,91,-65,]),'LESSEQ':([57,60,61,94,95,119,120,121,122,],[92,-66,-67,92,92,92,92,92,-65,]),'NOT_EQUAL':([57,60,61,94,95,119,120,121,122,],[93,-66,-67,93,93,93,93,93,-65,]),'IN':([101,],[131,]),'OUT':([101,131,],[132,150,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'C':([0,8,28,],[2,17,50,]),'epsilon':([0,2,5,8,12,15,28,29,43,46,50,51,73,76,78,98,100,101,118,135,137,],[4,7,13,4,13,7,4,53,65,70,7,53,53,106,110,106,70,130,145,106,110,]),'V':([2,15,50,],[5,23,73,]),'const_decl':([3,],[8,]),'ID':([3,6,19,46,100,],[9,16,27,71,71,]),'P':([5,12,],[11,21,]),'proc_decl':([5,12,],[12,12,]),'var_decl':([6,],[15,]),'integer':([18,56,64,76,78,82,83,96,98,112,113,114,115,135,137,146,],[25,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'statement':([20,29,51,73,84,144,159,],[29,51,51,51,118,156,160,]),'block':([20,29,51,73,84,126,144,159,],[30,30,30,30,30,148,30,30,]),'print':([20,29,51,73,84,144,159,],[31,31,31,31,31,31,31,]),'read':([20,29,51,73,84,144,159,],[32,32,32,32,32,32,32,]),'asgn':([20,29,51,73,84,144,159,],[33,33,33,33,33,33,33,]),'cond':([20,29,51,73,84,144,159,],[34,34,34,34,34,34,34,]),'for':([20,29,51,73,84,144,159,],[35,35,35,35,35,35,35,]),'return':([20,29,51,73,84,144,159,],[36,36,36,36,36,36,36,]),'call':([20,29,51,73,84,144,159,],[37,37,37,37,37,37,37,]),'var':([20,29,51,56,64,73,76,78,82,83,84,96,98,112,113,114,115,135,137,144,146,159,],[40,40,40,79,79,40,79,108,79,79,40,79,79,79,79,79,79,79,108,40,79,40,]),'type':([24,128,],[47,149,]),'S':([29,51,73,],[52,74,102,]),'bool':([41,58,59,85,86,87,],[57,94,95,119,120,121,]),'BRAC':([43,],[63,]),'F':([46,100,],[68,127,]),'format':([46,100,],[69,69,]),'string':([54,55,],[76,78,]),'expr':([56,64,76,78,82,83,96,98,112,113,114,115,135,137,146,],[80,97,105,109,116,117,123,105,138,139,140,141,105,109,157,]),'relop':([57,94,95,119,120,121,],[87,87,87,87,87,87,]),'E':([76,98,135,],[104,125,153,]),'Va':([78,137,],[107,155,]),'M':([101,],[128,]),'mode':([101,],[129,]),'EL':([118,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> C V P BEGIN statement S END SEMICOLON','program',8,'p_program','ply_yacc.py',8),
  ('C -> CONST const_decl C','C',3,'p_C','ply_yacc.py',10),
  ('C -> epsilon','C',1,'p_C','ply_yacc.py',11),
  ('V -> VAR var_decl V','V',3,'p_V','ply_yacc.py',13),
  ('V -> epsilon','V',1,'p_V','ply_yacc.py',14),
  ('P -> proc_decl P','P',2,'p_P','ply_yacc.py',16),
  ('P -> epsilon','P',1,'p_P','ply_yacc.py',17),
  ('S -> statement S','S',2,'p_S','ply_yacc.py',19),
  ('S -> epsilon','S',1,'p_S','ply_yacc.py',20),
  ('const_decl -> ID EQUAL integer SEMICOLON','const_decl',4,'p_const_decl','ply_yacc.py',23),
  ('ID -> IDENTIFIER CAMMA ID','ID',3,'p_ID','ply_yacc.py',26),
  ('ID -> IDENTIFIER','ID',1,'p_ID','ply_yacc.py',27),
  ('var_decl -> ID COLON type SEMICOLON','var_decl',4,'p_var_decl','ply_yacc.py',30),
  ('type -> INTEGER','type',1,'p_type','ply_yacc.py',33),
  ('proc_decl -> PROCEDURE IDENTIFIER LPAREN F RPAREN SEMICOLON block','proc_decl',7,'p_proc_decl','ply_yacc.py',36),
  ('F -> format SEMICOLON F','F',3,'p_F','ply_yacc.py',38),
  ('F -> format','F',1,'p_F','ply_yacc.py',39),
  ('F -> epsilon','F',1,'p_F','ply_yacc.py',40),
  ('format -> ID COLON M type','format',4,'p_format','ply_yacc.py',43),
  ('M -> mode','M',1,'p_M','ply_yacc.py',45),
  ('M -> epsilon','M',1,'p_M','ply_yacc.py',46),
  ('mode -> IN','mode',1,'p_mode','ply_yacc.py',49),
  ('mode -> OUT','mode',1,'p_mode','ply_yacc.py',50),
  ('mode -> IN OUT','mode',2,'p_mode','ply_yacc.py',51),
  ('block -> BEGIN C V S END SEMICOLON','block',6,'p_block','ply_yacc.py',54),
  ('statement -> block','statement',1,'p_statement','ply_yacc.py',57),
  ('statement -> print','statement',1,'p_statement','ply_yacc.py',58),
  ('statement -> read','statement',1,'p_statement','ply_yacc.py',59),
  ('statement -> asgn','statement',1,'p_statement','ply_yacc.py',60),
  ('statement -> cond','statement',1,'p_statement','ply_yacc.py',61),
  ('statement -> for','statement',1,'p_statement','ply_yacc.py',62),
  ('statement -> return','statement',1,'p_statement','ply_yacc.py',63),
  ('statement -> call','statement',1,'p_statement','ply_yacc.py',64),
  ('print -> PRINT LPAREN string E RPAREN SEMICOLON','print',6,'p_print','ply_yacc.py',67),
  ('E -> expr CAMMA E','E',3,'p_E','ply_yacc.py',69),
  ('E -> expr','E',1,'p_E','ply_yacc.py',70),
  ('E -> epsilon','E',1,'p_E','ply_yacc.py',71),
  ('read -> READ LPAREN string Va RPAREN SEMICOLON','read',6,'p_read','ply_yacc.py',74),
  ('Va -> var CAMMA Va','Va',3,'p_Va','ply_yacc.py',77),
  ('Va -> expr','Va',1,'p_Va','ply_yacc.py',78),
  ('Va -> epsilon','Va',1,'p_Va','ply_yacc.py',79),
  ('string -> IDENTIFIER','string',1,'p_string','ply_yacc.py',82),
  ('asgn -> var ASSIGN expr SEMICOLON','asgn',4,'p_asgn','ply_yacc.py',85),
  ('cond -> IF bool THEN statement EL','cond',5,'p_cond','ply_yacc.py',88),
  ('EL -> ELSE statement','EL',2,'p_EL','ply_yacc.py',90),
  ('EL -> epsilon','EL',1,'p_EL','ply_yacc.py',91),
  ('for -> FOR IDENTIFIER ASSIGN expr TO expr DO statement','for',8,'p_for','ply_yacc.py',94),
  ('return -> RETURN SEMICOLON','return',2,'p_return','ply_yacc.py',97),
  ('call -> CALL IDENTIFIER LPAREN E RPAREN SEMICOLON','call',6,'p_call','ply_yacc.py',100),
  ('expr -> integer','expr',1,'p_expr','ply_yacc.py',103),
  ('expr -> MINES expr','expr',2,'p_expr','ply_yacc.py',104),
  ('expr -> expr PLUS expr','expr',3,'p_expr','ply_yacc.py',105),
  ('expr -> expr MINES expr','expr',3,'p_expr','ply_yacc.py',106),
  ('expr -> expr MUL expr','expr',3,'p_expr','ply_yacc.py',107),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','ply_yacc.py',108),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','ply_yacc.py',109),
  ('expr -> var','expr',1,'p_expr','ply_yacc.py',110),
  ('var -> IDENTIFIER BRAC','var',2,'p_var','ply_yacc.py',113),
  ('BRAC -> LBRACKET expr RBRACKET','BRAC',3,'p_BRAC','ply_yacc.py',115),
  ('BRAC -> epsilon','BRAC',1,'p_BRAC','ply_yacc.py',116),
  ('bool -> NOT bool','bool',2,'p_bool','ply_yacc.py',119),
  ('bool -> bool AND bool','bool',3,'p_bool','ply_yacc.py',120),
  ('bool -> bool OR bool','bool',3,'p_bool','ply_yacc.py',121),
  ('bool -> bool relop bool','bool',3,'p_bool','ply_yacc.py',122),
  ('bool -> LPAREN bool RPAREN','bool',3,'p_bool','ply_yacc.py',123),
  ('bool -> IDENTIFIER','bool',1,'p_bool','ply_yacc.py',124),
  ('bool -> DIGIT','bool',1,'p_bool','ply_yacc.py',125),
  ('relop -> EQUAL','relop',1,'p_relop','ply_yacc.py',128),
  ('relop -> GREATER','relop',1,'p_relop','ply_yacc.py',129),
  ('relop -> LESS','relop',1,'p_relop','ply_yacc.py',130),
  ('relop -> GREATEQ','relop',1,'p_relop','ply_yacc.py',131),
  ('relop -> LESSEQ','relop',1,'p_relop','ply_yacc.py',132),
  ('relop -> NOT_EQUAL','relop',1,'p_relop','ply_yacc.py',133),
  ('integer -> DIGIT','integer',1,'p_integer','ply_yacc.py',136),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','ply_yacc.py',139),
]
