
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CALL CAMMA CHAR COLON CONST DIGIT DIGIT_ERROR DIVIDE DO ELSE END EQUAL FOR GREATEQ GREATER IDENTIFIER IF ILLEGALCHAR IN INTEGER LACKO LBRACKET LESS LESSEQ LPAREN MINES MUL NOT NOT_EQUAL OR OUT PLUS PRINT PROCEDURE RACKO RBRACKET READ RETURN RPAREN SEMICOLON THEN TO VARprogram : C V P BEGIN statement S END SEMICOLONC : CONST const_decl C\n    | epsilonV : VAR var_decl V\n    | epsilonP : proc_decl P\n    | epsilonS : statement S\n    | epsilonconst_decl : ID EQUAL integer SEMICOLONID : IDENTIFIER CAMMA ID\n    | IDENTIFIERvar_decl : ID COLON type SEMICOLONtype : INTEGERproc_decl : PROCEDURE IDENTIFIER LPAREN F RPAREN SEMICOLON blockF : format SEMICOLON F\n    | format\n    | epsilonformat : ID COLON M typeM : mode\n    | epsilonmode : IN\n    | OUT\n    | IN OUTblock : BEGIN C V S END SEMICOLONstatement : block\n    | print\n    | read\n    | asgn\n    | cond\n    | for\n    | return\n    | callprint : PRINT LPAREN string E RPAREN SEMICOLONE : expr CAMMA E\n    | expr\n    | epsilonread : READ LPAREN string Va RPAREN SEMICOLONVa : var CAMMA Va\n    | expr\n    | epsilonstring : IDENTIFIER\n    | CHARasgn : var ASSIGN expr SEMICOLONcond : IF bool THEN statement ELEL : ELSE statement\n    | epsilonfor : FOR IDENTIFIER ASSIGN expr TO expr DO statementreturn : RETURN SEMICOLONcall : CALL IDENTIFIER LPAREN E RPAREN SEMICOLONexpr : integer\n    | MINES expr\n    | expr PLUS expr\n    | expr MINES expr\n    | expr MUL expr\n    | expr DIVIDE expr\n    | LPAREN expr RPAREN\n    | var\n    | CHARvar : IDENTIFIER BRACBRAC : LBRACKET expr RBRACKET\n    | epsilonbool : NOT bool\n    | bool AND bool\n    | bool OR bool\n    | bool relop bool\n    | LPAREN bool RPAREN\n    | IDENTIFIER\n    | DIGITrelop : EQUAL\n    | GREATER\n    | LESS\n    | GREATEQ\n    | LESSEQ\n    | NOT_EQUALinteger : DIGITepsilon :'
    
_lr_action_items = {'CONST':([0,8,28,49,],[3,3,3,-10,]),'VAR':([0,2,4,8,15,17,28,49,50,72,],[-77,6,-3,-77,6,-2,-77,-10,6,-13,]),'PROCEDURE':([0,2,4,5,7,8,12,15,17,23,49,72,150,153,],[-77,-77,-3,14,-5,-77,14,-77,-2,-4,-10,-13,-15,-25,]),'BEGIN':([0,2,4,5,7,8,11,12,13,15,17,20,21,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,86,113,120,128,145,146,147,150,153,154,156,158,160,161,162,],[-77,-77,-3,-77,-5,-77,20,-77,-7,-77,-2,28,-6,-4,-77,28,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,28,-49,-13,28,28,-44,-77,28,-45,28,-47,-15,-25,-34,-38,-46,-50,28,-48,]),'$end':([1,105,],[0,-1,]),'IDENTIFIER':([3,4,6,7,8,14,15,17,19,20,23,28,29,30,31,32,33,34,35,36,37,41,42,45,46,49,50,51,54,55,56,58,59,64,66,72,73,76,77,78,79,83,84,86,87,88,89,90,91,92,93,94,95,98,100,102,113,114,115,116,117,120,137,139,145,146,147,148,153,154,156,158,160,161,162,],[10,-3,10,-5,-77,22,-77,-2,10,43,-4,-77,43,-26,-27,-28,-29,-30,-31,-32,-33,60,62,67,10,-10,-77,43,77,77,43,60,60,43,-49,-13,43,43,-42,-43,43,43,43,43,60,60,60,-70,-71,-72,-73,-74,-75,43,43,10,-44,43,43,43,43,-77,43,43,-45,43,-47,43,-25,-34,-38,-46,-50,43,-48,]),'PRINT':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,86,113,120,145,146,147,153,154,156,158,160,161,162,],[-3,-5,-77,-77,-2,38,-4,-77,38,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,38,-49,-13,38,38,-44,-77,-45,38,-47,-25,-34,-38,-46,-50,38,-48,]),'READ':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,86,113,120,145,146,147,153,154,156,158,160,161,162,],[-3,-5,-77,-77,-2,39,-4,-77,39,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,39,-49,-13,39,39,-44,-77,-45,39,-47,-25,-34,-38,-46,-50,39,-48,]),'IF':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,86,113,120,145,146,147,153,154,156,158,160,161,162,],[-3,-5,-77,-77,-2,41,-4,-77,41,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,41,-49,-13,41,41,-44,-77,-45,41,-47,-25,-34,-38,-46,-50,41,-48,]),'FOR':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,86,113,120,145,146,147,153,154,156,158,160,161,162,],[-3,-5,-77,-77,-2,42,-4,-77,42,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,42,-49,-13,42,42,-44,-77,-45,42,-47,-25,-34,-38,-46,-50,42,-48,]),'RETURN':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,86,113,120,145,146,147,153,154,156,158,160,161,162,],[-3,-5,-77,-77,-2,44,-4,-77,44,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,44,-49,-13,44,44,-44,-77,-45,44,-47,-25,-34,-38,-46,-50,44,-48,]),'CALL':([4,7,8,15,17,20,23,28,29,30,31,32,33,34,35,36,37,49,50,51,66,72,73,86,113,120,145,146,147,153,154,156,158,160,161,162,],[-3,-5,-77,-77,-2,45,-4,-77,45,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,45,-49,-13,45,45,-44,-77,-45,45,-47,-25,-34,-38,-46,-50,45,-48,]),'END':([4,7,8,15,17,23,28,29,30,31,32,33,34,35,36,37,49,50,51,52,53,66,72,73,74,104,113,120,145,147,153,154,156,158,160,162,],[-3,-5,-77,-77,-2,-4,-77,-77,-26,-27,-28,-29,-30,-31,-32,-33,-10,-77,-77,75,-9,-49,-13,-77,-8,135,-44,-77,-45,-47,-25,-34,-38,-46,-50,-48,]),'EQUAL':([9,10,27,57,60,61,96,97,121,122,123,124,],[18,-12,-11,90,-68,-69,90,90,90,90,90,-67,]),'CAMMA':([10,26,43,63,65,80,82,85,107,110,118,126,140,141,142,143,144,],[19,-76,-77,-60,-62,-58,-51,-59,137,139,-52,-61,-53,-54,-55,-56,-57,]),'COLON':([10,16,27,71,],[-12,24,-11,103,]),'DIGIT':([18,41,56,58,59,64,76,77,78,79,83,84,87,88,89,90,91,92,93,94,95,98,100,114,115,116,117,137,139,148,],[26,61,26,61,61,26,26,-42,-43,26,26,26,61,61,61,-70,-71,-72,-73,-74,-75,26,26,26,26,26,26,26,26,26,]),'LPAREN':([22,38,39,41,56,58,59,64,67,76,77,78,79,83,84,87,88,89,90,91,92,93,94,95,98,100,114,115,116,117,137,139,148,],[46,54,55,59,84,59,59,84,100,84,-42,-43,84,84,84,59,59,59,-70,-71,-72,-73,-74,-75,84,84,84,84,84,84,84,84,84,]),'INTEGER':([24,103,130,131,132,133,134,152,],[48,-77,48,-20,-21,-22,-23,-24,]),'SEMICOLON':([25,26,43,44,47,48,63,65,69,75,80,81,82,85,101,118,126,135,136,138,140,141,142,143,144,149,151,],[49,-76,-77,66,72,-14,-60,-62,102,105,-58,113,-51,-59,128,-52,-61,153,154,156,-53,-54,-55,-56,-57,160,-19,]),'PLUS':([26,43,63,65,80,81,82,85,99,107,110,111,118,119,125,126,140,141,142,143,144,159,],[-76,-77,-60,-62,-58,114,-51,-59,114,114,-58,114,114,114,114,-61,114,114,114,114,-57,114,]),'MINES':([26,43,56,63,64,65,76,77,78,79,80,81,82,83,84,85,98,99,100,107,110,111,114,115,116,117,118,119,125,126,137,139,140,141,142,143,144,148,159,],[-76,-77,83,-60,83,-62,83,-42,-43,83,-58,115,-51,83,83,-59,83,115,83,115,-58,115,83,83,83,83,115,115,115,-61,83,83,115,115,115,115,-57,83,115,]),'MUL':([26,43,63,65,80,81,82,85,99,107,110,111,118,119,125,126,140,141,142,143,144,159,],[-76,-77,-60,-62,-58,116,-51,-59,116,116,-58,116,116,116,116,-61,116,116,116,116,-57,116,]),'DIVIDE':([26,43,63,65,80,81,82,85,99,107,110,111,118,119,125,126,140,141,142,143,144,159,],[-76,-77,-60,-62,-58,117,-51,-59,117,117,-58,117,117,117,117,-61,117,117,117,117,-57,117,]),'RBRACKET':([26,43,63,65,80,82,85,99,118,126,140,141,142,143,144,],[-76,-77,-60,-62,-58,-51,-59,126,-52,-61,-53,-54,-55,-56,-57,]),'RPAREN':([26,43,46,48,60,61,63,65,68,69,70,76,77,78,79,80,82,85,96,97,100,102,106,107,108,109,110,111,112,118,119,121,122,123,124,126,127,129,137,139,140,141,142,143,144,151,155,157,],[-76,-77,-77,-14,-68,-69,-60,-62,101,-17,-18,-77,-42,-43,-77,-58,-51,-59,-63,124,-77,-77,136,-36,-37,138,-58,-40,-41,-52,144,-64,-65,-66,-67,-61,149,-16,-77,-77,-53,-54,-55,-56,-57,-19,-35,-39,]),'TO':([26,43,63,65,80,82,85,118,125,126,140,141,142,143,144,],[-76,-77,-60,-62,-58,-51,-59,-52,148,-61,-53,-54,-55,-56,-57,]),'DO':([26,43,63,65,80,82,85,118,126,140,141,142,143,144,159,],[-76,-77,-60,-62,-58,-51,-59,-52,-61,-53,-54,-55,-56,-57,161,]),'ELSE':([30,31,32,33,34,35,36,37,66,113,120,145,147,153,154,156,158,160,162,],[-26,-27,-28,-29,-30,-31,-32,-33,-49,-44,146,-45,-47,-25,-34,-38,-46,-50,-48,]),'ASSIGN':([40,43,62,63,65,126,],[56,-77,98,-60,-62,-61,]),'NOT':([41,58,59,87,88,89,90,91,92,93,94,95,],[58,58,58,58,58,58,-70,-71,-72,-73,-74,-75,]),'LBRACKET':([43,],[64,]),'CHAR':([54,55,56,64,76,77,78,79,83,84,98,100,114,115,116,117,137,139,148,],[78,78,85,85,85,-42,-43,85,85,85,85,85,85,85,85,85,85,85,85,]),'THEN':([57,60,61,96,121,122,123,124,],[86,-68,-69,-63,-64,-65,-66,-67,]),'AND':([57,60,61,96,97,121,122,123,124,],[87,-68,-69,87,87,87,87,87,-67,]),'OR':([57,60,61,96,97,121,122,123,124,],[88,-68,-69,88,88,88,88,88,-67,]),'GREATER':([57,60,61,96,97,121,122,123,124,],[91,-68,-69,91,91,91,91,91,-67,]),'LESS':([57,60,61,96,97,121,122,123,124,],[92,-68,-69,92,92,92,92,92,-67,]),'GREATEQ':([57,60,61,96,97,121,122,123,124,],[93,-68,-69,93,93,93,93,93,-67,]),'LESSEQ':([57,60,61,96,97,121,122,123,124,],[94,-68,-69,94,94,94,94,94,-67,]),'NOT_EQUAL':([57,60,61,96,97,121,122,123,124,],[95,-68,-69,95,95,95,95,95,-67,]),'IN':([103,],[133,]),'OUT':([103,133,],[134,152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'C':([0,8,28,],[2,17,50,]),'epsilon':([0,2,5,8,12,15,28,29,43,46,50,51,73,76,79,100,102,103,120,137,139,],[4,7,13,4,13,7,4,53,65,70,7,53,53,108,112,108,70,132,147,108,112,]),'V':([2,15,50,],[5,23,73,]),'const_decl':([3,],[8,]),'ID':([3,6,19,46,102,],[9,16,27,71,71,]),'P':([5,12,],[11,21,]),'proc_decl':([5,12,],[12,12,]),'var_decl':([6,],[15,]),'integer':([18,56,64,76,79,83,84,98,100,114,115,116,117,137,139,148,],[25,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'statement':([20,29,51,73,86,146,161,],[29,51,51,51,120,158,162,]),'block':([20,29,51,73,86,128,146,161,],[30,30,30,30,30,150,30,30,]),'print':([20,29,51,73,86,146,161,],[31,31,31,31,31,31,31,]),'read':([20,29,51,73,86,146,161,],[32,32,32,32,32,32,32,]),'asgn':([20,29,51,73,86,146,161,],[33,33,33,33,33,33,33,]),'cond':([20,29,51,73,86,146,161,],[34,34,34,34,34,34,34,]),'for':([20,29,51,73,86,146,161,],[35,35,35,35,35,35,35,]),'return':([20,29,51,73,86,146,161,],[36,36,36,36,36,36,36,]),'call':([20,29,51,73,86,146,161,],[37,37,37,37,37,37,37,]),'var':([20,29,51,56,64,73,76,79,83,84,86,98,100,114,115,116,117,137,139,146,148,161,],[40,40,40,80,80,40,80,110,80,80,40,80,80,80,80,80,80,80,110,40,80,40,]),'type':([24,130,],[47,151,]),'S':([29,51,73,],[52,74,104,]),'bool':([41,58,59,87,88,89,],[57,96,97,121,122,123,]),'BRAC':([43,],[63,]),'F':([46,102,],[68,129,]),'format':([46,102,],[69,69,]),'string':([54,55,],[76,79,]),'expr':([56,64,76,79,83,84,98,100,114,115,116,117,137,139,148,],[81,99,107,111,118,119,125,107,140,141,142,143,107,111,159,]),'relop':([57,96,97,121,122,123,],[89,89,89,89,89,89,]),'E':([76,100,137,],[106,127,155,]),'Va':([79,139,],[109,157,]),'M':([103,],[130,]),'mode':([103,],[131,]),'EL':([120,],[145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> C V P BEGIN statement S END SEMICOLON','program',8,'p_program','ply_yacc.py',249),
  ('C -> CONST const_decl C','C',3,'p_C','ply_yacc.py',251),
  ('C -> epsilon','C',1,'p_C','ply_yacc.py',252),
  ('V -> VAR var_decl V','V',3,'p_V','ply_yacc.py',254),
  ('V -> epsilon','V',1,'p_V','ply_yacc.py',255),
  ('P -> proc_decl P','P',2,'p_P','ply_yacc.py',257),
  ('P -> epsilon','P',1,'p_P','ply_yacc.py',258),
  ('S -> statement S','S',2,'p_S','ply_yacc.py',260),
  ('S -> epsilon','S',1,'p_S','ply_yacc.py',261),
  ('const_decl -> ID EQUAL integer SEMICOLON','const_decl',4,'p_const_decl','ply_yacc.py',264),
  ('ID -> IDENTIFIER CAMMA ID','ID',3,'p_ID','ply_yacc.py',267),
  ('ID -> IDENTIFIER','ID',1,'p_ID','ply_yacc.py',268),
  ('var_decl -> ID COLON type SEMICOLON','var_decl',4,'p_var_decl','ply_yacc.py',271),
  ('type -> INTEGER','type',1,'p_type','ply_yacc.py',274),
  ('proc_decl -> PROCEDURE IDENTIFIER LPAREN F RPAREN SEMICOLON block','proc_decl',7,'p_proc_decl','ply_yacc.py',277),
  ('F -> format SEMICOLON F','F',3,'p_F','ply_yacc.py',279),
  ('F -> format','F',1,'p_F','ply_yacc.py',280),
  ('F -> epsilon','F',1,'p_F','ply_yacc.py',281),
  ('format -> ID COLON M type','format',4,'p_format','ply_yacc.py',284),
  ('M -> mode','M',1,'p_M','ply_yacc.py',286),
  ('M -> epsilon','M',1,'p_M','ply_yacc.py',287),
  ('mode -> IN','mode',1,'p_mode','ply_yacc.py',290),
  ('mode -> OUT','mode',1,'p_mode','ply_yacc.py',291),
  ('mode -> IN OUT','mode',2,'p_mode','ply_yacc.py',292),
  ('block -> BEGIN C V S END SEMICOLON','block',6,'p_block','ply_yacc.py',295),
  ('statement -> block','statement',1,'p_statement','ply_yacc.py',298),
  ('statement -> print','statement',1,'p_statement','ply_yacc.py',299),
  ('statement -> read','statement',1,'p_statement','ply_yacc.py',300),
  ('statement -> asgn','statement',1,'p_statement','ply_yacc.py',301),
  ('statement -> cond','statement',1,'p_statement','ply_yacc.py',302),
  ('statement -> for','statement',1,'p_statement','ply_yacc.py',303),
  ('statement -> return','statement',1,'p_statement','ply_yacc.py',304),
  ('statement -> call','statement',1,'p_statement','ply_yacc.py',305),
  ('print -> PRINT LPAREN string E RPAREN SEMICOLON','print',6,'p_print','ply_yacc.py',308),
  ('E -> expr CAMMA E','E',3,'p_E','ply_yacc.py',310),
  ('E -> expr','E',1,'p_E','ply_yacc.py',311),
  ('E -> epsilon','E',1,'p_E','ply_yacc.py',312),
  ('read -> READ LPAREN string Va RPAREN SEMICOLON','read',6,'p_read','ply_yacc.py',315),
  ('Va -> var CAMMA Va','Va',3,'p_Va','ply_yacc.py',318),
  ('Va -> expr','Va',1,'p_Va','ply_yacc.py',319),
  ('Va -> epsilon','Va',1,'p_Va','ply_yacc.py',320),
  ('string -> IDENTIFIER','string',1,'p_string','ply_yacc.py',323),
  ('string -> CHAR','string',1,'p_string','ply_yacc.py',324),
  ('asgn -> var ASSIGN expr SEMICOLON','asgn',4,'p_asgn','ply_yacc.py',327),
  ('cond -> IF bool THEN statement EL','cond',5,'p_cond','ply_yacc.py',330),
  ('EL -> ELSE statement','EL',2,'p_EL','ply_yacc.py',332),
  ('EL -> epsilon','EL',1,'p_EL','ply_yacc.py',333),
  ('for -> FOR IDENTIFIER ASSIGN expr TO expr DO statement','for',8,'p_for','ply_yacc.py',336),
  ('return -> RETURN SEMICOLON','return',2,'p_return','ply_yacc.py',339),
  ('call -> CALL IDENTIFIER LPAREN E RPAREN SEMICOLON','call',6,'p_call','ply_yacc.py',342),
  ('expr -> integer','expr',1,'p_expr','ply_yacc.py',345),
  ('expr -> MINES expr','expr',2,'p_expr','ply_yacc.py',346),
  ('expr -> expr PLUS expr','expr',3,'p_expr','ply_yacc.py',347),
  ('expr -> expr MINES expr','expr',3,'p_expr','ply_yacc.py',348),
  ('expr -> expr MUL expr','expr',3,'p_expr','ply_yacc.py',349),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','ply_yacc.py',350),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','ply_yacc.py',351),
  ('expr -> var','expr',1,'p_expr','ply_yacc.py',352),
  ('expr -> CHAR','expr',1,'p_expr','ply_yacc.py',353),
  ('var -> IDENTIFIER BRAC','var',2,'p_var','ply_yacc.py',356),
  ('BRAC -> LBRACKET expr RBRACKET','BRAC',3,'p_BRAC','ply_yacc.py',358),
  ('BRAC -> epsilon','BRAC',1,'p_BRAC','ply_yacc.py',359),
  ('bool -> NOT bool','bool',2,'p_bool','ply_yacc.py',362),
  ('bool -> bool AND bool','bool',3,'p_bool','ply_yacc.py',363),
  ('bool -> bool OR bool','bool',3,'p_bool','ply_yacc.py',364),
  ('bool -> bool relop bool','bool',3,'p_bool','ply_yacc.py',365),
  ('bool -> LPAREN bool RPAREN','bool',3,'p_bool','ply_yacc.py',366),
  ('bool -> IDENTIFIER','bool',1,'p_bool','ply_yacc.py',367),
  ('bool -> DIGIT','bool',1,'p_bool','ply_yacc.py',368),
  ('relop -> EQUAL','relop',1,'p_relop','ply_yacc.py',371),
  ('relop -> GREATER','relop',1,'p_relop','ply_yacc.py',372),
  ('relop -> LESS','relop',1,'p_relop','ply_yacc.py',373),
  ('relop -> GREATEQ','relop',1,'p_relop','ply_yacc.py',374),
  ('relop -> LESSEQ','relop',1,'p_relop','ply_yacc.py',375),
  ('relop -> NOT_EQUAL','relop',1,'p_relop','ply_yacc.py',376),
  ('integer -> DIGIT','integer',1,'p_integer','ply_yacc.py',379),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','ply_yacc.py',382),
]
